{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jo\\xE3o Marcelo\\\\Documents\\\\GitHub\\\\Site-EngComp\\\\src\\\\components\\\\NavBar\\\\RightNav.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Ul = styled.ul`\n  // Estilos da barra de navegação\n`;\n_c = Ul;\nconst RightNav = _ref => {\n  _s();\n  let {\n    open\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userImage, setUserImage] = useState('');\n\n  // Lógica para verificar se o usuário está logado e definir o estado\n  // Você pode substituir esta lógica com a sua própria verificação de autenticação\n\n  // Se o usuário estiver logado, defina isLoggedIn como true e userImage com a URL da imagem do usuário\n  // Caso contrário, deixe isLoggedIn como false\n\n  // Exemplo:\n  // if (/* lógica para verificar se o usuário está logado */) {\n  //   setIsLoggedIn(true);\n  //   setUserImage(/* URL da imagem do usuário */);\n  // } else {\n  //   setIsLoggedIn(false);\n  //   setUserImage('');\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Ul, {\n    open: open,\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userImage,\n        alt: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/Login\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(RightNav, \"Pgr/kVy9RNMkAbWdMMz69/CdHlI=\");\n_c2 = RightNav;\nexport default RightNav;\nvar _c, _c2;\n$RefreshReg$(_c, \"Ul\");\n$RefreshReg$(_c2, \"RightNav\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","Ul","ul","_c","RightNav","_ref","_s","open","isLoggedIn","setIsLoggedIn","userImage","setUserImage","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","_c2","$RefreshReg$"],"sources":["C:/Users/João Marcelo/Documents/GitHub/Site-EngComp/src/components/NavBar/RightNav.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface RightNavProps {\r\n  open: boolean;\r\n}\r\n\r\nconst Ul = styled.ul<RightNavProps>`\r\n  // Estilos da barra de navegação\r\n`;\r\n\r\nconst RightNav = ({ open }: RightNavProps) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userImage, setUserImage] = useState('');\r\n\r\n  // Lógica para verificar se o usuário está logado e definir o estado\r\n  // Você pode substituir esta lógica com a sua própria verificação de autenticação\r\n\r\n  // Se o usuário estiver logado, defina isLoggedIn como true e userImage com a URL da imagem do usuário\r\n  // Caso contrário, deixe isLoggedIn como false\r\n\r\n  // Exemplo:\r\n  // if (/* lógica para verificar se o usuário está logado */) {\r\n  //   setIsLoggedIn(true);\r\n  //   setUserImage(/* URL da imagem do usuário */);\r\n  // } else {\r\n  //   setIsLoggedIn(false);\r\n  //   setUserImage('');\r\n  // }\r\n\r\n  return (\r\n    <Ul open={open}>\r\n      {isLoggedIn ? (\r\n        <li>\r\n          <img src={userImage} alt=\"User\" />\r\n        </li>\r\n      ) : (\r\n        <li>\r\n          <a href='/Login'>Login</a>\r\n        </li>\r\n      )}\r\n      {/* ... outros itens de navegação */}\r\n    </Ul>\r\n  );\r\n};\r\n\r\nexport default RightNav;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvC,MAAMC,EAAE,GAAGH,MAAM,CAACI,EAAkB;AACpC;AACA,CAAC;AAACC,EAAA,GAFIF,EAAE;AAIR,MAAMG,QAAQ,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC;EAAoB,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEG,OAAA,CAACC,EAAE;IAACM,IAAI,EAAEA,IAAK;IAAAK,QAAA,EACZJ,UAAU,gBACTR,OAAA;MAAAY,QAAA,eACEZ,OAAA;QAAKa,GAAG,EAAEH,SAAU;QAACI,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,gBAELlB,OAAA;MAAAY,QAAA,eACEZ,OAAA;QAAGmB,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EACL;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAET,CAAC;AAACZ,EAAA,CAjCIF,QAAQ;AAAAgB,GAAA,GAARhB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAiB,GAAA;AAAAC,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}